// include xfunction for updateVersion
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.github.lambdaprime:id.xfunction:14.0"
    }
}

plugins {
    id 'java'
    id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

javadoc {
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
    options.overview = "src/overview.html";
    // ignore missing @return, @param etc
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

jar {
    manifest { 
        attributes 'Implementation-Version': "${rootProject.version}"
    }
}

task createRelease(type: Copy) {
    def out = 'release'
    from jar.archiveFile
    into out
}

task cleanRelease(type: Delete) {
    delete "$projectDir/release"
}

assemble.dependsOn createRelease
createRelease.dependsOn javadoc
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply

if (project.hasProperty('publish')) {

  // update version only during publishing
  task updateVersion() {
      def version = rootProject.version;
      if (version.contains("SNAPSHOT")) return;
      println "Updating version to " + version
      new id.xfunction.text.Substitutor()
          .withRegexpSupport()
          .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
              "io.github.lambdaprime:id.xfunction:[0-9.]+", "io.github.lambdaprime:id.xfunction:" + version
          ));
  }
  createRelease.dependsOn updateVersion

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }
  
  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'id.xfunction'
        groupId = 'io.github.lambdaprime'
        from components.java
        pom {
          name = 'id.xfunction'
          description = 'Java library which provides set of extensions for standard Java APIs'
          url = 'https://github.com/lambdaprime/xfunction'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }
          
          scm {
            url = 'https://github.com/lambdaprime/xfunction.git'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}