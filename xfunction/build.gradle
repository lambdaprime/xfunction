// gradle clean build
// gradle publishToMavenLocal

plugins {
    id 'java'
}

apply plugin : 'eclipse'

repositories {
    mavenCentral()
}

sourceSets {
    java11 {
        java {
           srcDirs = [ 'src/main/java', 'src/main/java11' ]
           exclude { FileTreeElement details ->
               details.file.canonicalPath.matches(".*/java/.*/HttpClientBuilder.java") ||
               details.file.canonicalPath.matches(".*/java/.*/XHttpClient.java")
           }
        }
    }
}

javadoc {
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
    options.overview = "src/overview.html";
}

task java11doc(type: Javadoc) {
    source = files('src/main/java11') {
        exclude '**/module-info.java'
    }
    destinationDir = new File(destinationDir.getParent(), "java11doc")
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
}

import java.nio.file.*;
// Copies all files under java11 javadoc over files in original javadoc
java11doc.doLast {
    def dstDir = destinationDir.toPath()
    Files.walk(dstDir)
        .skip(1)
        .filter {it.toFile().isDirectory()}
        .filter {!it.endsWith('jquery')}
        .filter {!it.endsWith('resources')}
        .flatMap{p -> Files.walk(p, Integer.MAX_VALUE)}
        .filter {!it.toFile().isDirectory()}
        .filter {!it.endsWith('package-summary.html')}
        .filter {!it.endsWith('package-tree.html')}
        .each{ Path p -> Files.copy(p, javadoc.destinationDir.toPath().resolve(dstDir.relativize(p)), StandardCopyOption.REPLACE_EXISTING) }
    destinationDir.deleteDir()
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.compilerArgs << '--release' << '8'
}

compileJava11Java {
    sourceCompatibility = 11
    targetCompatibility = 11
}

jar {
    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }
    manifest { 
        attributes 'Multi-Release': 'true' 
    }
}

import id.xfunction.text.Substitutor
task updateVersion() {
    if (version.contains("SNAPSHOT")) return;
    println "Updating version to " + version
    new Substitutor()
        .withRegexpSupport()
        .substitute(Paths.get("${project.rootDir}/README.md"), Map.of(
            "io.github.lambdaprime:id.xfunction:[0-9.]+", "io.github.lambdaprime:id.xfunction:" + version
        ));
}

task packageJavadoc(type: Copy) {
    from file("$projectDir/build/docs")
    into file("${project.rootDir}/docs")
}

task createRelease(type: Copy) {
    def out = 'release'
    from jar.archiveFile
    into out
}

task cleanRelease(type: Delete) {
    delete "$projectDir/release"
}

assemble.dependsOn createRelease
createRelease.dependsOn java11doc,javadoc,packageJavadoc,updateVersion
java11doc.dependsOn javadoc
clean.dependsOn cleanRelease

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'id.xfunction'
            group = "io.github.lambdaprime"
            version = "${version}"
            artifact jar.archiveFile
        }
    }
}

if (project.hasProperty('publishToStagingRepo')) {

  // this comes from https://central.sonatype.org/publish/publish-gradle/

  apply plugin: 'signing'

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from "README-sources.txt"
  }

  artifacts {
    archives javadocJar, sourcesJar
  }
  
  signing {
    sign configurations.archives
  }
  
  apply plugin: 'maven'

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'id.xfunction'
          artifactId 'id.xfunction'
          packaging 'jar'
          // optionally artifactId can be defined here
          description 'Java library which provides set of extensions for standard Java APIs'
          url 'https://github.com/lambdaprime/xfunction'

          scm {
            url 'https://github.com/lambdaprime/xfunction.git'
          }

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id 'lambdaprime'
              email 'intid@protonmail.com'
            }
          }
        }
      }
    }
  }

}