// gradle clean build

plugins {
    id 'java'
}

apply plugin : 'eclipse'

repositories {
    mavenCentral()
}

sourceSets {
    java11 {
        java {
           srcDirs = [ 'src/main/java', 'src/main/java11' ]
           exclude { FileTreeElement details ->
               details.file.canonicalPath.matches(".*/java/.*/HttpClientBuilder.java")
           }
        }
    }
}

javadoc {
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
}

task java11doc(type: Javadoc) {
    source = files('src/main/java11') {
        exclude '**/module-info.java'
    }
    destinationDir = new File(destinationDir.getParent(), "java11doc")
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
}

import java.nio.file.*;
// Copies all files under java11 javadoc over files in original javadoc
java11doc.doLast {
    def dstDir = destinationDir.toPath()
    Files.walk(dstDir, 1)
        .skip(1)
        .filter {it.toFile().isDirectory()}
        .filter {!it.endsWith('jquery')}
        .filter {!it.endsWith('resources')}
        .flatMap{p -> Files.walk(p, Integer.MAX_VALUE)}
        .filter {!it.toFile().isDirectory()}
        .filter {!it.endsWith('package-summary.html')}
        .filter {!it.endsWith('package-tree.html')}
        .each{ Path p -> Files.copy(p, javadoc.destinationDir.toPath().resolve(dstDir.relativize(p)), StandardCopyOption.REPLACE_EXISTING) }
    destinationDir.deleteDir()
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.compilerArgs << '--release' << '8'
}

compileJava11Java {
    sourceCompatibility = 11
    targetCompatibility = 11
}

jar {
    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }
    manifest { 
        attributes 'Multi-Release': 'true' 
    }
}

task packageJavadoc(type: Copy) {
    from file("$projectDir/build/docs")
    into file("${project.rootDir}/docs")
}

task createRelease(type: Copy) {
    def out = 'release'
    from jar.archiveFile
    into out
}

task cleanRelease(type: Delete) {
    delete "$projectDir/release"
}

assemble.dependsOn createRelease
createRelease.dependsOn java11doc,javadoc,packageJavadoc
java11doc.dependsOn javadoc
clean.dependsOn cleanRelease
